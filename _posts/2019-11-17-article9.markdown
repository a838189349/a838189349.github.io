---
layout: post
title: "如何高效率把控管理项目进度与自己宝贵的开发时间"
subtitle: ""
date: 2019-11-17 18:39:05
author: "小小良"
header-img: "img/bg/bg_article_1.jpg"
catelog: true
tags:
    - 项目
---

在开发中我们经常会遇到一些困惑：手上的项目/需求越来越多，测试那边提出的bug只增不减，这时候应该采取什么措施去保证自己在公司里的生产力，达到预期的KDA？

我们从三个点开始说起

## 需求确认与评审
常见的开发流程一般如：

![流程图](https://www.z4a.net/images/2019/11/18/668ebf44e2bb308722e062179412a59.png)

最开始的时候，由产品提供本次迭代的需求。一般会向我们询问是否有空档期。

接着进行需求的评审，这里我们要做到从之前需求的后遗症以及后续需求的可能衔接性来判断对应需求的合理与否。并且我们需要做一个有主见的程序员，充分了解自己产品的运行逻辑与受众架构，不能产品说什么你就做什么，一个未从事过开发行业的产品经理所提出的需求一般都是两个极端：

> 1、设想天马行空，完全没有承上启下的思维，往往是市面上有什么就抄什么（别人都做出来，为什么我们做不到）

> 2、设计毫无亮点，普通的点击交互，普通的跳转需求，照搬老板口中的想法。

obviously，我们要让产品提出完美的需求是不太可能的，因此在需求评审的时候可以由我们去引导产品经理，给出恰当并且带有建设性的意见，提供难以反驳的依据，让需求往对开发有利的方向改进。

"这个时间不是很够，放在后续的迭代吧。"，这是开发应该学会保命语句，产品对于程序的功能开发时间并没有特别深的概念。所以一旦你盲目的答应了他抛过来的各种需求，导致的结果往往会是因为无法完成工作加班到深夜。

要确定什么需求能砍，什么不能砍。首先，要清楚自己这个时间段的工作重点，权衡自身的余力，有意识地拒绝一些重复/无意义的需求，当然，前提是你的工作重点应该与公司盈利业务息息相关，当一些无用需求过多堆积导致公司业务线需求在timelines被压缩时，应该与上级（如CTO）商量后，回绝对某些需求。

新的需求尽量是迭代新的功能，减少对旧功能的修改。要避免引起数据结构的变动，设计到旧功能大量变动时，斟酌是否重构部分模块。


## 需求排序

当我们接受了这一个需求的迭代，首先需要做的就是确定好需求的优先级。

如 老板要的需求 > 紧急bug > 效益需求 > 运营需求 > UI改版或重构 >= 字眼修改

确定好了需求的优先级，下一步要做的就是拆分出子需求，初步做一个排期。

大部分公司的排期都是由项目经理或者cto安排，所以只有很少的程序员会对这个有概念。要想做到了然于心的地步，我们要做到以下几点：

- 了解需求进入正式开发阶段的前提条件，如：页面上UI是否已经提供了设计稿与切图。前端与后端协商先完成的模块等，再进行排期。
- 不要重复去造轮子，一次思考，长久复用。在公司工作，我们首要的任务除了写代码外，就是要帮老板赚到钱，对于用户和老板来说，他们往往并不关心我们是怎么写代码的，老板关心的是你能否用最短的时间、最低的人工成本去实现利益最大化。而用户关心的只是bug的有无。（当然，适当的尝试新技术与重构错误模块这一点在我看来是必要的）
- 排期要给自己留一点预期，例如原定2019/11/18提测的迭代，我们需要在2019/11/15日左右开发完成，给自己三天的缓冲期，在这段时间里，如果没有完成内容，可以做最后的冲刺，如果已经完成了，可以做一次自测，也可以利用这段空档期去学习增加自己的知识储备，为后续项目研发奠定基础。

## 每周的汇报

我们这里的汇报，并不是指打卡式的任务，不应该把这个当成占用了开发时间的负担，而应该把它作为一个总结，一份反思。 当某一天你能够按照上周指定的计划完成了本周的工作，甚至有时间盈余时，你的成就感会倍增，慢慢的形成了良好的工作循环。

最好的做法就是每天早上十分钟的早会或是每周五下午的周结会。
大家各自汇报内容。

1.昨天做了什么? / 上周做了什么模块?
2.今天要做什么? / 本周预期做哪些模块?
3.有没有遇到什么难题? / 上周的预期有没有达到，如果没有，是什么原因导致?

注意点：全员参加，通过这些信息的共享可以使每个组员都能了解到项目的总体进展。不要陷于细节讨论。

## 需求变动

开发过程中，我们一定会遇到需求变更的情况，最好的解决办法就是叫上产品经理，大家针对变动的需求心平气和的坐下来开会讨论，程序这边明确告知产品变更需求的风险（时间成本、技术原因等），寻求最合理的解决方案。


##  部署与分支管理
为了代码仓库的整洁与线上版本的可靠性，我们必须保证代码的版本演进清晰，分支明确。所以我们需要制定以下规则：

分支要求：

1.master 主分支，该分支存放正式环境的代码，只有通过了测试，确认无误后才会从对应迭代中合并分支。
2.dev 预生产分支，指通过了本地测试的情况下，发布到预生产环境的代码。
3.hotfix 线上紧急bug分支，从master分支上开，修复对应bug后合并回master分支。
4.v 版本分支，留存档案 如 v1.0.0  v2.3.2 根据迭代开启。

提交代码方案：

1.feat: 指新功能、新页面代码的编写。
2.fix：修复bug。
3.refactor：重构模块或页面。
4.hotfix: 紧急修复线上bug（bug内容）


## 上线后

一般我们的迭代发布都是在深夜，所以第二天技术部除了测试人员外一般都不会在公司。

当发布版本后第一件事就是要做回归测试，开发人员手机要保持通讯，当出现bug时，在家及时回滚版本并且定位问题，等待再次发版。


## 总结

挑几个重点的讲：

1、开发人员一定了解自己公司的产品是如何运作、营收，这样在需求评审时，可以适当简化或回绝掉一下对当前迭代无关紧要的需求。
2、开发过程中及时做有效的沟通，避免功能实现后做无用的重构。
3、保证当前的开发分支在master之上。
4、提测时要发邮件，抄送人填好，为kda做备份。
5、上线后手机要保持联络，线上出了bug人还找不到就是杀无赦的大罪。

一个优秀的程序员和普通的程序员的区别，可能就在于理解问题的深度。遇到问题多思考，从是什么？为什么？怎么搞？求质的同时也求量，不断精进，如果一直在原地踏步，跳进坑的是自己的前途呢。