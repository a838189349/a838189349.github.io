---
layout: post
title: "为什么JavaScript是单线程的？"
subtitle: "单线程、多线程分别是什么？"
date: 2019-10-27 21:31:05
author: "小小良"
header-img: "img/bg/bg_article_1.jpg"
tags:
    -Javascript
---

## 为什么JavaScript是单线程的？

首先让我们来了解一下单线程和多线程的区别。

> 单线程就是进程只有一个线程，它会以阻塞的形式，一个个函数按顺序执行。

> 多线程就是进程有多个线程，

还在DOS时代，人们就在寻求一种多任务的实现。于是出现了TSR类型的后台驻留程序，比较有代表性的有SIDE KICK、VSAFE等优秀的TSR程序，这类程序的出现和应用确实给用户使用计算机带来了极大的方便，比如SIDE KICK，们编程可以在不用进编辑程序的状态下，一边编辑源程序，一边编译运行，非常方便。但是，DOS单任务操作系统的致命缺陷注定了在DOS下不可能开发出真正的多任务程序。进入WINDOWS3.1时代，这种情况依然没有根本的改变，一次应用只能做一件事。比如数据库查询，除非应用编得很好，在查询期间整个系统将不响应用户的输入。
 进入了WINDOWS NT和WINDOWS 9X时代，情况就有了彻底的改观，操作系统从真正意义上实现了多任务（严格地说，WIN9X还算不上）。一个应用程序，在需要的时候可以有许多个执行线程，每个线程就是一个小的执行程序，操作系统自动使各个线程共享CPU资源，确保任一线程都不能使系统死锁。这样，在编程的时候，可以把费时间的任务移到后台，在前台用另一个线程接受用户的输入。对那些对实时性要求比较高的编程任务，如网络客户服务、串行通信等应用时，多线程的实现无疑大大地增强了程序的可用性和稳固性。


在node问世之前，JavaScript只是一门浏览器脚本语言，它所实现的只是操作DOM元素来实现与用户的进行交互。

所以它从诞生之初，就被使命决定只能采用单线程。

试想，假设JavaScript是一门多线程语言，当一个线程操作A DOM，需要添加一个元素时， 另一个线程删除了A DOM，
此时浏览器应该展示给用户的结果是什么？

结果当然是不允许出现这种情况的。

为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JS脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JS单线程的本质。

## 那么JavaScript身为一门单线程语言，是怎么实现异步的呢？

**首先我们需要明确一点，JavaScript虽然是单线程语言，但是它的宿主，浏览器，可不是单线程的。 那么他们有什么关系呢？**

1、任务队列
单线程中，只有前一个任务结束，才能执行下一个任务。随着计算机的发展，内存，运存等越来越大，很多时候CPU是闲着的，并且内存充足，
而IO设备（输入输出设备）很慢（比如网络请求），不得不等待结果出来，再往下执行。

> 这时候JavaScript的设计者意识到，主线程这时候往往可以忽略网络请求的任务，挂在正在等待的任务，执行队列中后面的任务，等到IO设备返回了结果，
再回来执行下去。

于是任务就被分成了两种：同步、异步任务。

同步会阻塞代码的执行，而异步不会。（比如alert是同步，setTimeout是异步）；

同步任务：只有前一个任务执行完成后，才可执行下一个任务，在主线程中

异步任务：这个队列的所有任务都是不进入主线程执行，而是被浏览提供的线程执行，当执行完毕后就会产生一个回调函数，并且通知主线程，在主线程执行完当前所执行的任务后，就会调取最早通知自己的回调函数，使其进入主线程中执行，比如ajax请求，再主线程中呈现的就是请求结果

![img](https://img-blog.csdn.net/20180323092930886?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDgwNTk3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)

1、 所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。

2、 主线程之外，还存在着一个任务队列（task queue），只要异步任务有了运行结果，就在任务队列之中插入一个事件（回调函数callback）。

3、 当所有的同步任务完成时，JavaScript此时就会去读取任务队列中的事件。

4、 主线程会不断地重复第三步。


所谓“回调参数”只是一段暂时被主线程挂起的代码，当主线程中所有同步任务完成时， 主线程会不断去的任务队列中查找异步执行完成的回调函数并执行。

“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于存在后文提到的”定时器”功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。

结论：**JavaScript虽然是一门单线程语言，但是它基于浏览器多线程的特性，实现了异步。**

